@model ViewmMODeElMASTER
@{
    ViewData["Title"] = "AddFAQ";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<style>
    /* General styles */
    body, html {
        height: 100%;
        margin: 0;
        font-family: Arial, sans-serif;
    }

    .container-fluid {
        height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .row {
        flex: 1;
        display: flex;
    }

    /* Sidebar (Contacts List) */
    .sidebar {
        background-color: #f5f5f5;
        border-right: 1px solid #ddd;
        display: flex;
        flex-direction: column;
    }

    .search-box {
        padding: 15px;
        border-bottom: 1px solid #ddd;
    }

    .contact-list {
        overflow-y: auto;
        flex: 1;
    }

    .contact {
        display: flex;
        align-items: center;
        padding: 10px;
        cursor: pointer;
        border-bottom: 1px solid #ddd;
    }

        .contact:hover {
            background-color: #e6e6e6;
        }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .contact-info {
        flex: 1;
    }

    .contact-name {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .contact-last-message {
        color: #888;
        font-size: 12px;
    }

    .contact-time {
        font-size: 12px;
        color: #888;
    }

    /* Chat Area */
    .chat-area {
        display: flex;
        flex-direction: column;
        border-right: 1px solid #ddd;
        height: 100%;
    }

    .chat-header {
        padding: 15px;
        border-bottom: 1px solid #ddd;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .chat-user-info {
        display: flex;
        align-items: center;
    }

    .chat-username {
        margin-left: 10px;
        font-weight: bold;
    }

    .chat-status {
        color: #888;
        font-size: 12px;
    }

    .chat-messages {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        background-color: #f9f9f9;
        max-height: calc(100vh - 120px);
    }

    .message {
        display: flex;
        margin-bottom: 20px;
    }

        .message.sent {
            justify-content: flex-end;
        }

        .message.received {
            justify-content: flex-start;
        }

    .message-content {
        padding: 10px;
        border-radius: 15px;
        max-width: 60%;
    }

    .message.sent .message-content {
        background-color: #DCF8C6;
    }

    .message.received .message-content {
        background-color: #f1f1f1;
    }

    .message-time {
        font-size: 10px;
        color: #888;
        margin-top: 5px;
        text-align: right;
    }

    .chat-input {
        display: flex;
        align-items: center;
        padding: 15px;
        border-top: 1px solid #ddd;
        background-color: #fff;
    }

        .chat-input input {
            flex: 1;
            margin-right: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 10px;
        }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        padding: 10px 20px;
        border-radius: 10px;
        cursor: pointer;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    /* User Details Sidebar */
    .user-details {
        background-color: #f5f5f5;
        padding: 15px;
    }

    .user-info {
        text-align: center;
        margin-bottom: 20px;
    }

        .user-info .avatar {
            width: 80px;
            height: 80px;
            margin-bottom: 10px;
        }

    .username {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .bio {
        color: #888;
        font-size: 12px;
        margin-bottom: 20px;
    }

    .user-actions .btn {
        margin-bottom: 10px;
    }
</style>
<div class="row small-spacing">
    <div class="col-12">
        <div class="box-content">
            <ul class="list-inline">
                <li class="margin-bottom-10">
                    <a href="#"><button type="button" class="btn btn-primary btn-rounded btn-bordered waves-effect waves-light">@ResourceWeb.LbWareHouse</button></a>
                </li>
                <li class="margin-bottom-10">
                    <a asp-area="Admin" asp-controller="Home" asp-action="Index"><button type="button" class="btn btn-primary btn-rounded btn-bordered waves-effect waves-light">Admin Home</button></a>
                </li>
                <li class="margin-bottom-10">
                    <a asp-area="" asp-controller="Home" asp-action="Index"><button type="button" class="btn btn-primary btn-rounded btn-bordered waves-effect waves-light">Home</button></a>
                </li>
            </ul>
            <span class="text-primary"><strong>@TempData["Saved successfully"]</strong></span>
            <span class="text-danger"><strong>@TempData["ErrorSave"]</strong></span>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12">
        <div class="box-content card white">
            <h4 class="box-title">@ResourceWeb.LBAddWareHouse</h4>
            <div class="card-content">
                <form role="form" method="post" asp-controller="WareHouse" asp-action="Save" enctype="multipart/form-data">
                    <div class="form-group">
                        <input type="hidden" asp-for="@Model.WareHouse.DataEntry" class="form-control" value="@User.Identity.Name">
                        <input type="hidden" asp-for="@Model.WareHouse.DateTimeEntry" value="@DateTime.Now">
                        <input type="hidden" asp-for="@Model.WareHouse.IdBWareHouse">
                        <input type="hidden" asp-for="@Model.returnUrl" id="url">
                    </div>
                    <div class="row small-spacing">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label asp-for="@Model.WareHouse.IdWareHouseType">@ResourceWeb.LbWareHouseType</label>
                                <select class="form-control" asp-for="@Model.WareHouse.IdWareHouseType" asp-items="@(new SelectList(ViewBag.WareHouseType, "IdWareHouseType", "WareHouseType"))" id="SelectWareHouseType"></select>
                                <span asp-validation-for="@Model.WareHouse.IdWareHouseType" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label asp-for="@Model.WareHouse.Description">@ResourceWeb.LbDescription1</label>
                                <input asp-for="@Model.WareHouse.Description" type="text" placeholder="@ResourceWeb.LbDescription1 ...." class="form-control" maxlength="300" id="Description">
                                <span asp-validation-for="@Model.WareHouse.Description" class="text-danger"></span>
                                <span style="color:red"><strong>@TempData["Description"]</strong></span>
                            </div>
                        </div>
                    </div>
                    <div class="row small-spacing">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label asp-for="@Model.WareHouse.Code">@ResourceWeb.Lbcode</label>
                                <input asp-for="@Model.WareHouse.Code" type="text" placeholder="@ResourceWeb.Lbcode ...." class="form-control" maxlength="300" id="Code" readonly>
                                <span asp-validation-for="@Model.WareHouse.Code" class="text-danger"></span>
                                <span style="color:red"><strong>@TempData["Code"]</strong></span>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>QR Code</label>
                                <img id="QRCodeImage" src="" alt="QR Code" class="img-fluid" />
                                <div>
                                    <a class="btn btn-sm btn-outline-primary" onclick="printWarehouseDetails()">Print</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row small-spacing">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label asp-for="@Model.WareHouse.Active">@ResourceWeb.LbActive</label>
                                <input asp-for="@Model.WareHouse.Active" type="checkbox" checked class="form-control" maxlength="300">
                                <span asp-validation-for="@Model.WareHouse.Active" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label asp-for="@Model.WareHouse.CurrentState">@ResourceWeb.lbCurrentState</label>
                                <input asp-for="@Model.WareHouse.CurrentState" type="checkbox" checked class="form-control" maxlength="300">
                                <span asp-validation-for="@Model.WareHouse.CurrentState" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm waves-effect waves-light">@ResourceWeb.lbSave</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12">
        <div class="box-content card white">
            <h4 class="box-title">Chat Messenger</h4>
            <div class="card-content">
                <div class="container-fluid">
                    <div class="row">
                        <!-- Sidebar (Contacts List) -->
                        <div class="col-md-3 col-lg-3 sidebar">
                            <div class="search-box">
                                <input type="text" class="form-control" placeholder="Search">
                            </div>
                            <div class="contact-list">
                                @foreach (var contact in Model.ViewChatMessage.GroupBy(m => m.SenderId)
                                .Select(m => m.OrderByDescending(m => m.MessageeTime).FirstOrDefault()))
                                {
                                    <div class="contact">
                                        <a asp-area="Admin" asp-controller="Chat" asp-action="Index" asp-route-anotherId="@contact.SenderId">
                                            <img src="@Helper.PathImageuser@contact.SenderImage" alt="Avatar" class="avatar">
                                            <div class="contact-info">
                                                <div class="contact-name">@contact.SenderName</div>
                                                <div class="contact-last-message">@contact.Message</div>
                                            </div>
                                            <div class="contact-time">@contact.MessageeTime.ToString("hh:mm tt")</div>
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Chat Area -->
                        <div class="col-md-6 col-lg-6 chat-area">
                            <div class="chat-header">
                                <div class="chat-user-info">
                                    <img src="@Helper.PathImageuser@ViewBag.img" alt="Avatar" class="avatar">
                                    <div class="chat-username">@ViewBag.another</div>
                                </div>
                                <div class="chat-status">Last seen @ViewBag.LastSeen</div>
                            </div>
                            <div id="messagesList" class="chat-messages">
                                @foreach (var message in Model.ViewChatMessage.OrderBy(m => m.MessageeTime))
                                {
                                    <div class="message @(message.SenderId == ViewBag.UserId ? "sent" : "received")">
                                        <div class="message-content">@message.Message</div>
                                        <div class="message-time">@message.MessageeTime.ToString("hh:mm tt")</div>
                                    </div>
                                }
                            </div>
                            <div class="chat-input">
                                <input type="text" id="messageInput1" class="form-control" placeholder="Write a message...">
                                <input type="text" hidden id="sendTo" value="@ViewBag.another" />
                                <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                            </div>
                        </div>

                        <!-- User Details Sidebar -->
                        <div class="col-md-3 col-lg-3 user-details">
                            <div class="user-info">
                                <img src="@Helper.PathImageuser@ViewBag.img" alt="User Avatar" class="avatar">
                                <div class="username">@ViewBag.another</div>
                                <div class="bio">@ViewBag.another, I like talk shows</div>
                            </div>
                            <div class="user-actions">
                                <button class="btn btn-block btn-light">Block user</button>
                                <button class="btn btn-block btn-light">Clear history</button>
                                <button class="btn btn-block btn-light">Delete conversation</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script src="~/Admin/assets/plugin/select2/js/select2.min.js"></script>
    <script src="~/Admin/assets/plugin/multiselect/multiselect.min.js"></script>

    <script>
        $(document).ready(function () {
            console.log("Document is ready");
            $('.select2_1').select2({
                placeholder: "Select an option",
                allowClear: true
            });

            // Generate random 5-character string
            function generateRandomString(length) {
                var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                var result = '';
                var charactersLength = characters.length;
                for (var i = 0; i < length; i++) {
                    result += characters.charAt(Math.floor(Math.random() * charactersLength));
                }
                return result;
            }

            // Function to update the Code field
            function updateCodeField() {
                var warehouseType = $('#SelectWareHouseType option:selected').text();
                var description = $('#Description').val();
                var randomString = generateRandomString(5);

                if (warehouseType && description) {
                    var code = warehouseType + description + randomString;
                    $('#Code').val(code);
                    updateQRCode(); // Update QR code when code is updated
                }
            }

            // Bind change events to WareHouseType and Description fields
            $('#SelectWareHouseType, #Description').on('change keyup', function () {
                updateCodeField();
            });

            // Update the QR code image
            function updateQRCode() {
                var code = $('#Code').val();
                if (code) {
                    $('#QRCodeImage').attr('src', '@Url.Action("GenerateQRCode", "WareHouse")?text=' + encodeURIComponent(code));
                } else {
                    $('#QRCodeImage').attr('src', '');
                }
            }

            // Bind change event to Code field to update QR code
            $('#Code').on('change keyup', function () {
                updateQRCode();
            });

            // Update the URL field with the current page URL
            $("#url").val(window.location.href);
        });

        function printWarehouseDetails() {
            var warehouseType = $('#SelectWareHouseType option:selected').text();
            var description = $('#Description').val();
            var qrCodeSrc = $('#QRCodeImage').attr('src');

            var url = '@Url.Action("PrintWareHouseDetails", "WareHouse")';

            // Encode URI components to handle special characters
            url = `${url}?warehouseType=${encodeURIComponent(warehouseType)}&description=${encodeURIComponent(description)}&qrCodeSrc=${encodeURIComponent(qrCodeSrc)}`;

            $.get(url, function (data) {
                var printWindow = window.open('', '_blank');
                printWindow.document.open();
                printWindow.document.write(data);
                printWindow.document.close();

                // Ensure the image is fully loaded before printing
                printWindow.onload = function () {
                    printWindow.print();
                };
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.error("Error: ", textStatus, errorThrown);
            });
        }



    </script>
    <script type="text/javascript">
        let connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        connection.on("ReceiveMessage", function (user, message, pathImg, img, time) {
            appendMessage(user, message, pathImg, img, time);
        });

        async function sendMessage() {
            const message = document.getElementById("messageInput1").value;
            const to = document.getElementById("sendTo").value;

            if (!to) {
                console.error("Recipient name (to) is null or undefined. Cannot send message.");
                alert("Please select a user to chat with.");
                return;
            }

            const fileInput = document.getElementById("ImgSend");
            let filePath = null;
            if (fileInput && fileInput.files.length > 0) {
                const file = fileInput.files[0];
                try {
                    filePath = await uploadFile(file);
                } catch (error) {
                    console.error("Error uploading file:", error);
                    return;
                }
            }

            document.getElementById("messageInput1").value = "";

            connection.invoke("SendMessageToClients", message, to, filePath).then(() => {
                // Append the message to the message list in the UI
                appendMessage('@ViewBag.UserId', message, filePath, '@ViewBag.img', new Date().toLocaleTimeString());
            }).catch(function (err) {
                console.error("Error sending message:", err.toString());
            });
        }

        async function uploadFile(file) {
            const formData = new FormData();
            formData.append("file", file);

            const response = await fetch("/Admin/chat/uploadFile", {
                method: "POST",
                body: formData
            });

            if (response.ok) {
                const data = await response.json();
                return data.filePath;
            } else {
                throw new Error("File upload failed");
            }
        }

        function appendMessage(user, message, pathImg, img, time) {
            const messageList = document.getElementById("messagesList");
            const isSender = user === '@ViewBag.UserId'; // Compare with the current user's ID or name
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message", isSender ? "sent" : "received");

            let content = `<div class="message-content">${message}</div><div class="message-time">${time}</div>`;

            // If there is an image attached to the message, add it to the content
            if (pathImg) {
                content = `<img src="${pathImg}" alt="Image message" class="message-image" />` + content;
            }

            messageDiv.innerHTML = content;
            messageList.appendChild(messageDiv);
            messageList.scrollTop = messageList.scrollHeight; // Scroll to the bottom after adding the message
        }

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        window.onload = function () {
            scrollToBottom();
        }

        function scrollToBottom() {
            const messagesList = document.getElementById("messagesList");
            messagesList.scrollTop = messagesList.scrollHeight;
        }
    </script>
}


